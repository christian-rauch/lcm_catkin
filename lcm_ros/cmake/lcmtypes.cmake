cmake_minimum_required(VERSION 2.8)
set(_lcmtypes)
set(_lcmtypes_c_dir ${PROJECT_BINARY_DIR}/lcmtypes/c)
set(_lcmtypes_cpp_dir ${PROJECT_BINARY_DIR}/lcmtypes/cpp)
set(_lcmtypes_python_dir_in ${PROJECT_BINARY_DIR}/lcmtypes/py)
set(_lcmtypes_java_dir ${PROJECT_BINARY_DIR}/lcmtypes/java)
set(_lcmtypes_h_dir ${CATKIN_DEVEL_PREFIX}/include/${PROJECT_NAME})
set(_lcmtypes_c_files)
set(_lcmtypes_h_files)
set(_lcmtypes_hpp_files_in)
set(_lcmtypes_hpp_files)
set(_lcmtypes_py_files)
set(_lcmtypes_java_files)
set(libname "lcmtypes_${PROJECT_NAME}")
set(_lcm_redirct_script ${CMAKE_CURRENT_LIST_DIR}/redirect.py)


macro(lcmtypes_get_types msgvar)
    # get a list of all LCM types
    file(GLOB __tmplcmtypes "${CMAKE_CURRENT_SOURCE_DIR}/lcmtypes/*.lcm")
    set(${msgvar} "")
    foreach(_msg ${__tmplcmtypes})
        # Try to filter out temporary and backup files
        if(${_msg} MATCHES "^[^\\.].*\\.lcm$")
            list(APPEND ${msgvar} ${_msg})
        endif(${_msg} MATCHES "^[^\\.].*\\.lcm$")
    endforeach(_msg)
endmacro()

macro(lcmtypes_get_targets ret outdir ext msgvar)
    foreach(_msg ${msgvar})
        get_filename_component(_tmp_name ${_msg} NAME_WE)
        list(APPEND ${ret} "${outdir}/${_tmp_name}.${ext}")
    endforeach(_msg)
endmacro()

function(lcmgen)
    execute_process(COMMAND ${LCM_GEN_EXECUTABLE} ${ARGV} RESULT_VARIABLE lcmgen_result)
    if(NOT lcmgen_result EQUAL 0)
        message(FATAL_ERROR "lcm-gen failed")
    endif()
endfunction()

macro(AddLCM)
  set(_lcmtypes_python_dir ${CATKIN_DEVEL_PREFIX}/${CATKIN_PACKAGE_PYTHON_DESTINATION})

  GetLCMPackageName(_lcm_package_name ${PROJECT_NAME})
  foreach(arg ${ARGN})
    list(APPEND _lcmtypes ${CMAKE_CURRENT_SOURCE_DIR}/lcmtypes/${arg}.lcm)
    list(APPEND _lcmtypes_c_files ${_lcmtypes_c_dir}/${arg}.c)
    list(APPEND _lcmtypes_h_files ${_lcmtypes_h_dir}/${arg}.h)
    string(REPLACE "${_lcm_package_name}_" "" tmp_hpp ${arg})
    list(APPEND _lcmtypes_hpp_files_in ${_lcmtypes_cpp_dir}/${tmp_hpp}.hpp)
    list(APPEND _lcmtypes_hpp_files ${_lcmtypes_h_dir}/${tmp_hpp}.hpp)
    list(APPEND _lcmtypes_py_files ${_lcmtypes_python_dir}/${tmp_hpp}.py)
    list(APPEND _lcmtypes_py_files_in ${_lcmtypes_python_dir_in}/${tmp_hpp}.py)
    list(APPEND _lcmtypes_java_files ${_lcmtypes_java_dir}/${_lcm_package_name}/${tmp_hpp}.java)
    message(STATUS "Adding LCM type '${arg}'")
  endforeach()
endmacro(AddLCM)

macro(GetLCMPackageName ret name)
  if(${name} MATCHES "_lcmtypes")
    string(REPLACE "_lcmtypes" "" ${ret} ${name})
  else()
    set(ret "")
  endif()
endmacro(GetLCMPackageName)

macro(GetPackages ret)
  set(${ret} "")
  GetLCMPackageName(tmp ${PROJECT_NAME})
  list_append_unique(${ret} ${tmp})
  foreach(depend_name ${catkin_ALL_FOUND_COMPONENTS})
    GetLCMPackageName(tmp ${depend_name})
    list_append_unique(${ret} ${tmp})
  endforeach()
endmacro(GetPackages)

function(lcmtypes_build_c)
    list(LENGTH _lcmtypes _num_lcmtypes)
    if(_num_lcmtypes EQUAL 0)
        return()
    endif()

    MATH(EXPR _num_lcmtypes2 "${_num_lcmtypes}*2")
    GetPackages(_lcm_packages)

    string(REGEX REPLACE "[^a-zA-Z0-9]" "_" __sanitized_project_name "${PROJECT_NAME}")

    # set some defaults

    # header file that includes all other generated header files
    set(agg_h_bname "${__sanitized_project_name}.h")

    # allow defaults to be overriden by function parameters
    set(modewords C_LIBNAME C_AGGREGATE_HEADER)

    # create a header file aggregating all of the autogenerated .h files
    set(__agg_h_fname "${_lcmtypes_h_dir}/${agg_h_bname}")
    file(WRITE ${__agg_h_fname}
        "#ifndef __lcmtypes_${__sanitized_project_name}_h__\n"
        "#define __lcmtypes_${__sanitized_project_name}_h__\n\n")
    foreach(h_file ${_lcmtypes_h_files})
        file(RELATIVE_PATH __tmp_path ${CATKIN_DEVEL_PREFIX}/include ${h_file})
        file(APPEND ${__agg_h_fname} "#include \"${__tmp_path}\"\n")
    endforeach()
    file(APPEND ${__agg_h_fname} "\n#endif\n")
    list(APPEND _lcmtypes_h_files ${__agg_h_fname})

    # generate C bindings for LCM types

    add_custom_command(
      OUTPUT ${_lcmtypes_c_files} ${_lcmtypes_h_files}
      COMMAND sh -c '([ -d ${_lcmtypes_c_dir} ] || mkdir -p ${_lcmtypes_c_dir}) && ${LCM_GEN_EXECUTABLE} -c --c-cpath ${_lcmtypes_c_dir} --c-hpath ${_lcmtypes_h_dir} ${_lcmtypes}'
      COMMAND sh -c '${_lcm_redirct_script} ${_num_lcmtypes2} ${_lcmtypes_c_files} ${_lcmtypes_h_files} ${_lcm_packages}'
      DEPENDS ${_lcmtypes}
      COMMENT "Generating LCM types (native c)"
    )

    add_custom_target(${PROJECT_NAME}_lcmgen_c ALL DEPENDS ${_lcmtypes} ${_lcmtypes_h_files} ${__agg_h_fname})
    add_library(${libname} ${_lcmtypes_c_files})
    add_dependencies(${libname} ${PROJECT_NAME}_lcmgen_c)

    unset(__sanitized_project_name)
    unset(__agg_h_fname)
endfunction()

function(lcmtypes_build_cpp)
    list(LENGTH _lcmtypes _num_lcmtypes)
    if(_num_lcmtypes EQUAL 0)
        return()
    endif()

    GetPackages(_lcm_packages)
    GetLCMPackageName(_lcm_package_name ${PROJECT_NAME})

    string(REGEX REPLACE "[^a-zA-Z0-9]" "_" __sanitized_project_name "${PROJECT_NAME}")

    # header file that includes all other generated header files
    set(agg_hpp_bname "${__sanitized_project_name}.hpp")

    # create a header file aggregating all of the autogenerated .hpp files
    set(__agg_hpp_fname "${_lcmtypes_h_dir}/${agg_hpp_bname}")
    file(WRITE ${__agg_hpp_fname}
        "#ifndef __lcmtypes_${__sanitized_project_name}_hpp__\n"
        "#define __lcmtypes_${__sanitized_project_name}_hpp__\n\n")
    foreach(hpp_file ${_lcmtypes_hpp_files})
        file(RELATIVE_PATH __tmp_path ${CATKIN_DEVEL_PREFIX}/include ${hpp_file})
        file(APPEND ${__agg_hpp_fname} "#include \"${__tmp_path}\"\n")
    endforeach()
    file(APPEND ${__agg_hpp_fname} "\n#endif\n")

    # generate C++ bindings for LCM types
    add_custom_target(${PROJECT_NAME}_lcmgen_cpp ALL DEPENDS ${_lcmtypes} ${__agg_hpp_fname})
    add_custom_command(
      TARGET ${PROJECT_NAME}_lcmgen_cpp
      COMMAND sh -c '([ -d ${_lcmtypes_h_dir} ] || mkdir -p ${_lcmtypes_h_dir}) && ${LCM_GEN_EXECUTABLE} --cpp --cpp-hpath ${_lcmtypes_cpp_dir} ${_lcmtypes}'
      COMMAND sh -c 'cp ${_lcmtypes_cpp_dir}/${_lcm_package_name}/* ${_lcmtypes_h_dir}'
      COMMAND sh -c '${_lcm_redirct_script} ${_num_lcmtypes} ${_lcmtypes_hpp_files} ${_lcm_packages}'
      DEPENDS ${_lcmtypes}
    )

    add_dependencies(${libname} ${PROJECT_NAME}_lcmgen_cpp)
    include_directories(${CATKIN_DEVEL_PREFIX}/include)

    unset(__sanitized_project_name)
    unset(__agg_hpp_fname)
endfunction()

function(lcmtypes_build_python)
    list(LENGTH _lcmtypes _num_lcmtypes)
    if(_num_lcmtypes EQUAL 0)
        return()
    endif()

    GetPackages(_lcm_packages)

    add_custom_target(${PROJECT_NAME}_lcmgen_py ALL DEPENDS ${_lcmtypes})
    add_custom_command(
      TARGET ${PROJECT_NAME}_lcmgen_py
      COMMAND sh -c '([ -d ${_lcmtypes_python_dir_in} ] || mkdir -p ${_lcmtypes_python_dir_in}) && ${LCM_GEN_EXECUTABLE} -p ${_lcmtypes} --ppath ${_lcmtypes_python_dir_in}'
      COMMAND sh -c '([ -d ${_lcmtypes_python_dir} ] || mkdir -p ${_lcmtypes_python_dir}) && cp ${_lcmtypes_python_dir_in}/${_lcm_package_name}/* ${_lcmtypes_python_dir}'
      COMMAND sh -c '${_lcm_redirct_script} ${_num_lcmtypes} ${_lcmtypes_py_files} ${_lcm_packages}'
      DEPENDS ${_lcmtypes}
    )

endfunction()

function(lcmtypes_build_java)
    lcmtypes_get_types(_lcmtypes)
    list(LENGTH _lcmtypes _num_lcmtypes)
    if(_num_lcmtypes EQUAL 0)
        return()
    endif()

    find_package(Java)

    GetPackages(_lcm_packages)

    # do we have LCM java bindings?  where is lcm.jar?
    execute_process(COMMAND pkg-config --variable=classpath lcm-java OUTPUT_VARIABLE LCM_JAR_FILE)
    if(NOT LCM_JAR_FILE)
        message(STATUS "Not building Java LCM type bindings (Can't find lcm.jar)")
        return()
    endif()
    string(STRIP ${LCM_JAR_FILE} LCM_JAR_FILE)
    set(LCMTYPES_JAR ${CATKIN_DEVEL_PREFIX}/${CATKIN_PACKAGE_LIB_DESTINATION}/lcmtypes_${PROJECT_NAME}.jar)


    add_custom_command(
      OUTPUT ${_lcmtypes_java_files}
      COMMAND sh -c '([ -d ${_lcmtypes_java_dir} ] || mkdir -p ${_lcmtypes_java_dir}) && ${LCM_GEN_EXECUTABLE} -j ${_lcmtypes} --jpath ${_lcmtypes_java_dir}'
      DEPENDS ${_lcmtypes}
      COMMENT "Generating LCM types (Java)"
    )

    add_custom_target(${PROJECT_NAME}_lcmgen_java ALL DEPENDS ${_lcmtypes} ${_lcmtypes_java_files})

    set(java_classpath ${_lcmtypes_java_dir}:${LCM_JAR_FILE})

    # search for lcmtypes_*.jar files in well-known places and add them to the
    # classpath
    foreach(pfx ${_lcm_packages})
        set(java_classpath ${java_classpath}:${CATKIN_DEVEL_PREFIX}/${CATKIN_PACKAGE_LIB_DESTINATION}/lcmtypes_${pfx}_lcmtypes.jar)
    endforeach()

    # convert the list of .java filenames to a list of .class filenames
    foreach(javafile ${_lcmtypes_java_files})
        string(REPLACE .java .class __tmp_class_fname ${javafile})
        list(APPEND _lcmtypes_class_files ${__tmp_class_fname})
        unset(__tmp_class_fname)
    endforeach()

    MESSAGE(" Java: " ${java_classpath})

    # add a rule to build the .class files from from the .java files
    add_custom_command(OUTPUT ${_lcmtypes_class_files}
        COMMAND ${JAVA_COMPILE} -source 6 -target 6 -cp ${java_classpath} ${_lcmtypes_java_files}
        DEPENDS ${_lcmtypes_java_files}
        VERBATIM
        COMMENT "Compiling LCM types (Java)"
    )

    # add a rule to build a .jar file from the .class files
    add_custom_command(OUTPUT ${LCMTYPES_JAR}
        COMMAND ${JAVA_ARCHIVE} cf ${LCMTYPES_JAR} -C ${_lcmtypes_java_dir} .
        DEPENDS ${_lcmtypes_class_files}
        VERBATIM)
    add_custom_target(lcmtypes_${PROJECT_NAME}_jar ALL DEPENDS ${LCMTYPES_JAR})

    add_dependencies(lcmtypes_${PROJECT_NAME}_jar ${PROJECT_NAME}_lcmgen_java)

endfunction()

macro(GenerateLCM)
    #find lcm-gen (it may be in the install path)
    find_program(LCM_GEN_EXECUTABLE lcm-gen ${EXECUTABLE_OUTPUT_PATH} ${EXECUTABLE_INSTALL_PATH})
    if (NOT LCM_GEN_EXECUTABLE)
        message(FATAL_ERROR "lcm-gen not found!\n")
        return()
    endif()

    lcmtypes_build_c()
    lcmtypes_build_cpp()
    lcmtypes_build_java(${ARGV})
    lcmtypes_build_python()
    #lcmtypes_install_types()
endmacro()
